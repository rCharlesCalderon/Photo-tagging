{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Psnma\\\\photo-tagging\\\\client\\\\src\\\\components\\\\Midnight.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, createContext } from \"react\";\nimport \"../index.css\";\nimport \"../styles/Midnight.css\";\nimport TargetCore from \"./TargetCore.jsx\";\nimport TargetList from \"./TargetList.jsx\";\nimport TargetStatus from \"./TargetStatus.jsx\";\nimport Header from \"./Header.jsx\";\nimport SubmitData from \"./SubmitData.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst targetContext = /*#__PURE__*/createContext(null);\nfunction Midnight() {\n  _s();\n  const [menu, setMenu] = useState(false);\n  //targetCore\n  const [targetCoreX, setTargetCoreXPosition] = useState(0);\n  const [targetCoreY, setTargetCoreYPosition] = useState(0);\n  //TargetList\n  const [targetListX, setTargetListXPosition] = useState(0);\n  const [targetListY, setTargetListYPosition] = useState(0);\n  //X Y coordinates\n  const [cordX, setCordX] = useState(0);\n  const [cordY, setCordY] = useState(0);\n  //targetData is the data from backend in the fetchTargetImages\n  const [targetData, setTargetData] = useState(null);\n  const [targetStat, setTargetStatus] = useState(false);\n  const [scoreboard, setScoreboard] = useState(null);\n  const [time, setTime] = useState({\n    sec: 0,\n    min: 0,\n    hr: 0\n  });\n  const [timer, setTimer] = useState(null);\n\n  // fucking retard\n  // const updateTimer = () => {\n  //   setTime((prev) => {\n  //     let newTime = { ...prev };\n  //     // update sec and see if we need to increase min\n  //     if (newTime.sec < 59) newTime.sec += 1;\n  //     else {\n  //       newTime.min += 1;\n  //       newTime.sec = 0;\n  //     }\n  //     // min has increased in *newTime* by now if it was updated, see if it has crossed 59\n  //     if (newTime.min === 60) {\n  //       newTime.min = 0;\n  //       newTime.hr += 1;\n  //     }\n\n  //     return newTime;\n  //   });\n  // };\n\n  const pauseOrResume = () => {\n    // const interval = setInterval(() => {\n    //   updateTimer();\n    // }, 1000);\n\n    // // Clear the interval when the component unmounts or when useEffect runs again\n    // return () => {\n    //   clearInterval(interval);\n    // };\n    setTimer(new Date());\n  };\n  useEffect(() => {\n    console.log(\"timer\", timer);\n  }, [timer]);\n  useEffect(() => {\n    pauseOrResume();\n    fetchTargetImages();\n  }, []);\n  useEffect(() => {\n    if (targetData !== null && checkAllTargets()) {\n      setScoreboard(true);\n    }\n  }, [targetData]);\n  function fetchTargetImages() {\n    fetch(\"http://localhost:3000/fetchTargetImages\").then(res => {\n      return res.json();\n    }).then(data => setTargetData(data));\n  }\n  function checkAllTargets() {\n    const checkAllTargets = targetData.every(obj => {\n      if (obj.status) {\n        return true;\n      }\n    });\n    return checkAllTargets;\n  }\n  function handleGame(event) {\n    setMenu(!menu);\n    handlePosition(event);\n  }\n  const handlePosition = e => {\n    let midnight = document.querySelector(\".midnight\");\n    let xPositioning = e.clientX + window.scrollX;\n    let yPositioning = e.clientY + window.scrollY;\n    let containerWidth = midnight.clientWidth;\n    let containerHeight = midnight.clientHeight;\n    let targetCordX = xPositioning / containerWidth * 100;\n    let targetCordY = yPositioning / containerHeight * 100;\n    setTargetCoreXPosition(xPositioning);\n    setTargetCoreYPosition(yPositioning);\n    setTargetListXPosition(xPositioning);\n    setTargetListYPosition(yPositioning);\n    setCordX(targetCordX);\n    setCordY(targetCordY);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(targetContext.Provider, {\n      value: {\n        targetListX,\n        targetListY,\n        targetData,\n        setTargetData,\n        targetCoreX,\n        targetCoreY,\n        cordX,\n        cordY,\n        targetStat,\n        setTargetStatus,\n        menu,\n        setMenu,\n        scoreboard,\n        setScoreboard\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), targetStat && /*#__PURE__*/_jsxDEV(TargetStatus, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./images/midnight.png\",\n        alt: \"\",\n        className: \"midnight\",\n        onClick: handleGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), menu && /*#__PURE__*/_jsxDEV(TargetCore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 18\n      }, this), menu && /*#__PURE__*/_jsxDEV(TargetList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 18\n      }, this), scoreboard && /*#__PURE__*/_jsxDEV(SubmitData, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: new Date().getSeconds()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Midnight, \"S3idbC4vYKGixvWiNhNM8ZsRCzM=\");\n_c = Midnight;\nexport { Midnight, targetContext };\nvar _c;\n$RefreshReg$(_c, \"Midnight\");","map":{"version":3,"names":["useEffect","useState","createContext","TargetCore","TargetList","TargetStatus","Header","SubmitData","jsxDEV","_jsxDEV","Fragment","_Fragment","targetContext","Midnight","_s","menu","setMenu","targetCoreX","setTargetCoreXPosition","targetCoreY","setTargetCoreYPosition","targetListX","setTargetListXPosition","targetListY","setTargetListYPosition","cordX","setCordX","cordY","setCordY","targetData","setTargetData","targetStat","setTargetStatus","scoreboard","setScoreboard","time","setTime","sec","min","hr","timer","setTimer","pauseOrResume","Date","console","log","fetchTargetImages","checkAllTargets","fetch","then","res","json","data","every","obj","status","handleGame","event","handlePosition","e","midnight","document","querySelector","xPositioning","clientX","window","scrollX","yPositioning","clientY","scrollY","containerWidth","clientWidth","containerHeight","clientHeight","targetCordX","targetCordY","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","className","onClick","getSeconds","_c","$RefreshReg$"],"sources":["C:/Users/Psnma/photo-tagging/client/src/components/Midnight.jsx"],"sourcesContent":["import { useEffect, useState, createContext } from \"react\";\r\nimport \"../index.css\";\r\nimport \"../styles/Midnight.css\";\r\nimport TargetCore from \"./TargetCore.jsx\";\r\nimport TargetList from \"./TargetList.jsx\";\r\nimport TargetStatus from \"./TargetStatus.jsx\";\r\nimport Header from \"./Header.jsx\";\r\nimport SubmitData from \"./SubmitData.jsx\";\r\nconst targetContext = createContext(null);\r\nfunction Midnight() {\r\n  const [menu, setMenu] = useState(false);\r\n  //targetCore\r\n  const [targetCoreX, setTargetCoreXPosition] = useState(0);\r\n  const [targetCoreY, setTargetCoreYPosition] = useState(0);\r\n  //TargetList\r\n  const [targetListX, setTargetListXPosition] = useState(0);\r\n  const [targetListY, setTargetListYPosition] = useState(0);\r\n  //X Y coordinates\r\n  const [cordX, setCordX] = useState(0);\r\n  const [cordY, setCordY] = useState(0);\r\n  //targetData is the data from backend in the fetchTargetImages\r\n  const [targetData, setTargetData] = useState(null);\r\n\r\n  const [targetStat, setTargetStatus] = useState(false);\r\n\r\n  const [scoreboard, setScoreboard] = useState(null);\r\n\r\n  const [time, setTime] = useState({\r\n    sec: 0,\r\n    min: 0,\r\n    hr: 0,\r\n  });\r\n\r\n  const [timer, setTimer] = useState(null);\r\n\r\n  // fucking retard\r\n  // const updateTimer = () => {\r\n  //   setTime((prev) => {\r\n  //     let newTime = { ...prev };\r\n  //     // update sec and see if we need to increase min\r\n  //     if (newTime.sec < 59) newTime.sec += 1;\r\n  //     else {\r\n  //       newTime.min += 1;\r\n  //       newTime.sec = 0;\r\n  //     }\r\n  //     // min has increased in *newTime* by now if it was updated, see if it has crossed 59\r\n  //     if (newTime.min === 60) {\r\n  //       newTime.min = 0;\r\n  //       newTime.hr += 1;\r\n  //     }\r\n\r\n  //     return newTime;\r\n  //   });\r\n  // };\r\n\r\n  const pauseOrResume = () => {\r\n    // const interval = setInterval(() => {\r\n    //   updateTimer();\r\n    // }, 1000);\r\n\r\n    // // Clear the interval when the component unmounts or when useEffect runs again\r\n    // return () => {\r\n    //   clearInterval(interval);\r\n    // };\r\n    setTimer(new Date());\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"timer\", timer);\r\n  }, [timer]);\r\n\r\n  useEffect(() => {\r\n    pauseOrResume();\r\n    fetchTargetImages();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (targetData !== null && checkAllTargets()) {\r\n      setScoreboard(true);\r\n    }\r\n  }, [targetData]);\r\n\r\n  function fetchTargetImages() {\r\n    fetch(\"http://localhost:3000/fetchTargetImages\")\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => setTargetData(data));\r\n  }\r\n  function checkAllTargets() {\r\n    const checkAllTargets = targetData.every((obj) => {\r\n      if (obj.status) {\r\n        return true;\r\n      }\r\n    });\r\n    return checkAllTargets;\r\n  }\r\n  function handleGame(event) {\r\n    setMenu(!menu);\r\n    handlePosition(event);\r\n  }\r\n\r\n  const handlePosition = (e) => {\r\n    let midnight = document.querySelector(\".midnight\");\r\n    let xPositioning = e.clientX + window.scrollX;\r\n    let yPositioning = e.clientY + window.scrollY;\r\n\r\n    let containerWidth = midnight.clientWidth;\r\n    let containerHeight = midnight.clientHeight;\r\n    let targetCordX = (xPositioning / containerWidth) * 100;\r\n    let targetCordY = (yPositioning / containerHeight) * 100;\r\n    setTargetCoreXPosition(xPositioning);\r\n    setTargetCoreYPosition(yPositioning);\r\n    setTargetListXPosition(xPositioning);\r\n    setTargetListYPosition(yPositioning);\r\n    setCordX(targetCordX);\r\n    setCordY(targetCordY);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <targetContext.Provider\r\n        value={{\r\n          targetListX,\r\n          targetListY,\r\n          targetData,\r\n          setTargetData,\r\n          targetCoreX,\r\n          targetCoreY,\r\n          cordX,\r\n          cordY,\r\n          targetStat,\r\n          setTargetStatus,\r\n          menu,\r\n          setMenu,\r\n          scoreboard,\r\n          setScoreboard,\r\n        }}\r\n      >\r\n        <Header />\r\n        {targetStat && <TargetStatus />}\r\n        <img\r\n          src=\"./images/midnight.png\"\r\n          alt=\"\"\r\n          className=\"midnight\"\r\n          onClick={handleGame}\r\n        ></img>\r\n\r\n        {menu && <TargetCore />}\r\n        {menu && <TargetList />}\r\n        {scoreboard && <SubmitData />}\r\n        <h2>{new Date().getSeconds()}</h2>\r\n      </targetContext.Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport { Midnight, targetContext };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}