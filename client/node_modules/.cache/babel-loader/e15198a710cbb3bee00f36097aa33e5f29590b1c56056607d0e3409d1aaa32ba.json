{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Psnma\\\\photo-tagging\\\\client\\\\src\\\\components\\\\AnimeMap.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useContext, createContext } from \"react\";\nimport \"../index.css\";\nimport \"../styles/AnimeMap.css\";\nimport TargetCore from \"./TargetCore.jsx\";\nimport TargetList from \"./TargetList.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst targetListContext = /*#__PURE__*/createContext(null);\nfunction AnimeMap() {\n  _s();\n  //USE JSX TO CONDITIONALLY RENDER THE TAGETCORE AND BOX\n  //ADD THE IMAGES INTO THE BOX, USESTATE UPDATE THE PICTURES LATER\n\n  const [menu, setMenu] = useState(false);\n  const [xPosition, setXPosition] = useState(0);\n  const [yPosition, setYPosition] = useState(0);\n  const [listXPosition, setXListPosition] = useState(0);\n  const [listYPosition, setYListPosition] = useState(0);\n  const [targetList, setTargetList] = useState(null);\n  useEffect(() => {\n    fetchTargetImages();\n  }, [menu]);\n  function fetchTargetImages() {\n    fetch(\"http://localhost:3000/fetchTargetImages\").then(res => {\n      return res.json();\n    }).then(data => setTargetList(data));\n  }\n  function handleGame(event) {\n    setMenu(!menu);\n    handlePosition(event);\n  }\n  const handlePosition = e => {\n    //-20 is for centering the TargetCore on the cursor\n    let xPositioning = e.clientX + window.scrollX - 20;\n    let yPositioning = e.clientY + window.scrollY - 20;\n    let listPositionX = xPositioning + 30;\n    let listPositionY = yPositioning + 30;\n    setXPosition(xPositioning);\n    setYPosition(yPositioning);\n    setXListPosition(listPositionX);\n    setYListPosition(listPositionY);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(targetListContext.Provider, {\n      value: {\n        listXPosition,\n        listYPosition\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./images/midnight.png\",\n        alt: \"\",\n        className: \"Anime-Map\",\n        onClick: handleGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), menu && /*#__PURE__*/_jsxDEV(TargetCore, {\n        x: xPosition,\n        y: yPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 18\n      }, this), menu && /*#__PURE__*/_jsxDEV(TargetList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(AnimeMap, \"tN1LJtb+z+8FfpmkgTtunLg6pGk=\");\n_c = AnimeMap;\nexport default {\n  AnimeMap\n};\nvar _c;\n$RefreshReg$(_c, \"AnimeMap\");","map":{"version":3,"names":["useEffect","useState","useContext","createContext","TargetCore","TargetList","jsxDEV","_jsxDEV","Fragment","_Fragment","targetListContext","AnimeMap","_s","menu","setMenu","xPosition","setXPosition","yPosition","setYPosition","listXPosition","setXListPosition","listYPosition","setYListPosition","targetList","setTargetList","fetchTargetImages","fetch","then","res","json","data","handleGame","event","handlePosition","e","xPositioning","clientX","window","scrollX","yPositioning","clientY","scrollY","listPositionX","listPositionY","children","Provider","value","src","alt","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","x","y","_c","$RefreshReg$"],"sources":["C:/Users/Psnma/photo-tagging/client/src/components/AnimeMap.jsx"],"sourcesContent":["import { useEffect, useState, useContext, createContext } from \"react\";\r\nimport \"../index.css\";\r\nimport \"../styles/AnimeMap.css\";\r\nimport TargetCore from \"./TargetCore.jsx\";\r\nimport TargetList from \"./TargetList.jsx\";\r\nconst targetListContext = createContext(null);\r\nfunction AnimeMap() {\r\n  //USE JSX TO CONDITIONALLY RENDER THE TAGETCORE AND BOX\r\n  //ADD THE IMAGES INTO THE BOX, USESTATE UPDATE THE PICTURES LATER\r\n\r\n  const [menu, setMenu] = useState(false);\r\n  const [xPosition, setXPosition] = useState(0);\r\n  const [yPosition, setYPosition] = useState(0);\r\n  const [listXPosition, setXListPosition] = useState(0);\r\n  const [listYPosition, setYListPosition] = useState(0);\r\n  const [targetList, setTargetList] = useState(null);\r\n  useEffect(() => {\r\n    fetchTargetImages();\r\n  }, [menu]);\r\n\r\n  function fetchTargetImages() {\r\n    fetch(\"http://localhost:3000/fetchTargetImages\")\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => setTargetList(data));\r\n  }\r\n\r\n  function handleGame(event) {\r\n    setMenu(!menu);\r\n    handlePosition(event);\r\n  }\r\n\r\n  const handlePosition = (e) => {\r\n    //-20 is for centering the TargetCore on the cursor\r\n    let xPositioning = e.clientX + window.scrollX - 20;\r\n    let yPositioning = e.clientY + window.scrollY - 20;\r\n    let listPositionX = xPositioning + 30;\r\n    let listPositionY = yPositioning + 30;\r\n    setXPosition(xPositioning);\r\n    setYPosition(yPositioning);\r\n    setXListPosition(listPositionX);\r\n    setYListPosition(listPositionY);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <targetListContext.Provider value={{ listXPosition, listYPosition }}>\r\n        <img\r\n          src=\"./images/midnight.png\"\r\n          alt=\"\"\r\n          className=\"Anime-Map\"\r\n          onClick={handleGame}\r\n        ></img>\r\n        {menu && <TargetCore x={xPosition} y={yPosition} />}\r\n        {menu && <TargetList />}\r\n      </targetListContext.Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default { AnimeMap };\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,aAAa,QAAQ,OAAO;AACtE,OAAO,cAAc;AACrB,OAAO,wBAAwB;AAC/B,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAOC,UAAU,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC1C,MAAMC,iBAAiB,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAC7C,SAASQ,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB;EACA;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAClDD,SAAS,CAAC,MAAM;IACdyB,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACZ,IAAI,CAAC,CAAC;EAEV,SAASY,iBAAiBA,CAAA,EAAG;IAC3BC,KAAK,CAAC,yCAAyC,CAAC,CAC7CC,IAAI,CAAEC,GAAG,IAAK;MACb,OAAOA,GAAG,CAACC,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CACDF,IAAI,CAAEG,IAAI,IAAKN,aAAa,CAACM,IAAI,CAAC,CAAC;EACxC;EAEA,SAASC,UAAUA,CAACC,KAAK,EAAE;IACzBlB,OAAO,CAAC,CAACD,IAAI,CAAC;IACdoB,cAAc,CAACD,KAAK,CAAC;EACvB;EAEA,MAAMC,cAAc,GAAIC,CAAC,IAAK;IAC5B;IACA,IAAIC,YAAY,GAAGD,CAAC,CAACE,OAAO,GAAGC,MAAM,CAACC,OAAO,GAAG,EAAE;IAClD,IAAIC,YAAY,GAAGL,CAAC,CAACM,OAAO,GAAGH,MAAM,CAACI,OAAO,GAAG,EAAE;IAClD,IAAIC,aAAa,GAAGP,YAAY,GAAG,EAAE;IACrC,IAAIQ,aAAa,GAAGJ,YAAY,GAAG,EAAE;IACrCvB,YAAY,CAACmB,YAAY,CAAC;IAC1BjB,YAAY,CAACqB,YAAY,CAAC;IAC1BnB,gBAAgB,CAACsB,aAAa,CAAC;IAC/BpB,gBAAgB,CAACqB,aAAa,CAAC;EACjC,CAAC;EAED,oBACEpC,OAAA,CAAAE,SAAA;IAAAmC,QAAA,eACErC,OAAA,CAACG,iBAAiB,CAACmC,QAAQ;MAACC,KAAK,EAAE;QAAE3B,aAAa;QAAEE;MAAc,CAAE;MAAAuB,QAAA,gBAClErC,OAAA;QACEwC,GAAG,EAAC,uBAAuB;QAC3BC,GAAG,EAAC,EAAE;QACNC,SAAS,EAAC,WAAW;QACrBC,OAAO,EAAEnB;MAAW;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB,CAAC,EACNzC,IAAI,iBAAIN,OAAA,CAACH,UAAU;QAACmD,CAAC,EAAExC,SAAU;QAACyC,CAAC,EAAEvC;MAAU;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAClDzC,IAAI,iBAAIN,OAAA,CAACF,UAAU;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC,gBAC7B,CAAC;AAEP;AAAC1C,EAAA,CArDQD,QAAQ;AAAA8C,EAAA,GAAR9C,QAAQ;AAuDjB,eAAe;EAAEA;AAAS,CAAC;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}