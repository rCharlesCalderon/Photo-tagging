{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Psnma\\\\photo-tagging\\\\client\\\\src\\\\components\\\\Midnight.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, createContext } from \"react\";\nimport \"../index.css\";\nimport \"../styles/Midnight.css\";\nimport TargetCore from \"./TargetCore.jsx\";\nimport TargetList from \"./TargetList.jsx\";\nimport TargetStatus from \"./TargetStatus.jsx\";\nimport Header from \"./Header.jsx\";\nimport SubmitData from \"./SubmitData.jsx\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst targetContext = /*#__PURE__*/createContext(null);\nfunction Midnight() {\n  _s();\n  const {\n    Map\n  } = useParams();\n  const [menu, setMenu] = useState(false);\n  //targetCore\n  const [targetCoreX, setTargetCoreXPosition] = useState(0);\n  const [targetCoreY, setTargetCoreYPosition] = useState(0);\n  //TargetList\n  const [targetListX, setTargetListXPosition] = useState(0);\n  const [targetListY, setTargetListYPosition] = useState(0);\n  //X Y coordinates\n  const [cordX, setCordX] = useState(0);\n  const [cordY, setCordY] = useState(0);\n  //targetData is the data from backend in the fetchTargetImages\n  const [targetData, setTargetData] = useState(null);\n  const [targetStat, setTargetStatus] = useState(false);\n  const [scoreboard, setScoreboard] = useState(null);\n  const [time, setTime] = useState({\n    sec: 0,\n    min: 0,\n    hr: 0\n  });\n  const [intervalId, setIntervalId] = useState();\n  const updateTimer = () => {\n    setTime(prev => {\n      let newTime = {\n        ...prev\n      };\n      if (newTime.sec < 59) newTime.sec += 1;else {\n        newTime.min += 1;\n        newTime.sec = 0;\n      }\n      if (newTime.min === 60) {\n        newTime.min = 0;\n        newTime.hr += 1;\n      }\n      return newTime;\n    });\n  };\n  useEffect(() => {\n    fetchTargetImages();\n    let id = setInterval(updateTimer, 1000);\n    setIntervalId(id);\n    console.log(Map, \"adadawdwa\");\n    return () => clearInterval(id);\n  }, []);\n  useEffect(() => {\n    if (targetData !== null && checkAllTargets()) {\n      setScoreboard(true);\n    }\n  }, [targetData]);\n  function fetchTargetImages() {\n    fetch(`http://localhost:3000/${Map}Targets`).then(res => {\n      return res.json();\n    }).then(data => setTargetData(data));\n  }\n  function checkAllTargets() {\n    const checkAllTargets = targetData.every(obj => {\n      if (obj.status) {\n        return true;\n      }\n    });\n    return checkAllTargets;\n  }\n  function handleGame(event) {\n    setMenu(!menu);\n    handlePosition(event);\n  }\n  const handlePosition = e => {\n    let midnight = document.querySelector(\".map-image\");\n    let xPositioning = e.clientX + window.scrollX;\n    let yPositioning = e.clientY + window.scrollY;\n    let containerWidth = midnight.clientWidth;\n    let containerHeight = midnight.clientHeight;\n    let targetCordX = xPositioning / containerWidth * 100;\n    let targetCordY = yPositioning / containerHeight * 100;\n    console.log(targetCordX, \"X\");\n    console.log(targetCordY, \"Y\");\n    setTargetCoreXPosition(xPositioning);\n    setTargetCoreYPosition(yPositioning);\n    setCordX(targetCordX);\n    setCordY(targetCordY);\n    setTargetListXPosition(xPositioning);\n    if (targetCordY > 86.31636562671045) {\n      setTargetListYPosition(yPositioning);\n    } else {\n      setTargetListYPosition(yPositioning);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(targetContext.Provider, {\n      value: {\n        targetListX,\n        targetListY,\n        targetData,\n        setTargetData,\n        targetCoreX,\n        targetCoreY,\n        cordX,\n        cordY,\n        targetStat,\n        setTargetStatus,\n        menu,\n        setMenu,\n        scoreboard,\n        setScoreboard,\n        time,\n        setTime,\n        intervalId,\n        setIntervalId,\n        Map\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), targetStat && /*#__PURE__*/_jsxDEV(TargetStatus, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `./images/${Map}.png`,\n        alt: \"\",\n        className: \"map-image\",\n        onClick: handleGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), menu && /*#__PURE__*/_jsxDEV(TargetCore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 18\n      }, this), scoreboard && /*#__PURE__*/_jsxDEV(SubmitData, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Midnight, \"xYBj7Bdx0w16zcrgSMHame0w0NM=\", false, function () {\n  return [useParams];\n});\n_c = Midnight;\nexport { Midnight, targetContext };\nvar _c;\n$RefreshReg$(_c, \"Midnight\");","map":{"version":3,"names":["useEffect","useState","createContext","TargetCore","TargetList","TargetStatus","Header","SubmitData","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","targetContext","Midnight","_s","Map","menu","setMenu","targetCoreX","setTargetCoreXPosition","targetCoreY","setTargetCoreYPosition","targetListX","setTargetListXPosition","targetListY","setTargetListYPosition","cordX","setCordX","cordY","setCordY","targetData","setTargetData","targetStat","setTargetStatus","scoreboard","setScoreboard","time","setTime","sec","min","hr","intervalId","setIntervalId","updateTimer","prev","newTime","fetchTargetImages","id","setInterval","console","log","clearInterval","checkAllTargets","fetch","then","res","json","data","every","obj","status","handleGame","event","handlePosition","e","midnight","document","querySelector","xPositioning","clientX","window","scrollX","yPositioning","clientY","scrollY","containerWidth","clientWidth","containerHeight","clientHeight","targetCordX","targetCordY","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Psnma/photo-tagging/client/src/components/Midnight.jsx"],"sourcesContent":["import { useEffect, useState, createContext } from \"react\";\r\nimport \"../index.css\";\r\nimport \"../styles/Midnight.css\";\r\nimport TargetCore from \"./TargetCore.jsx\";\r\nimport TargetList from \"./TargetList.jsx\";\r\nimport TargetStatus from \"./TargetStatus.jsx\";\r\nimport Header from \"./Header.jsx\";\r\nimport SubmitData from \"./SubmitData.jsx\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst targetContext = createContext(null);\r\nfunction Midnight() {\r\n  const { Map } = useParams();\r\n  const [menu, setMenu] = useState(false);\r\n  //targetCore\r\n  const [targetCoreX, setTargetCoreXPosition] = useState(0);\r\n  const [targetCoreY, setTargetCoreYPosition] = useState(0);\r\n  //TargetList\r\n  const [targetListX, setTargetListXPosition] = useState(0);\r\n  const [targetListY, setTargetListYPosition] = useState(0);\r\n  //X Y coordinates\r\n  const [cordX, setCordX] = useState(0);\r\n  const [cordY, setCordY] = useState(0);\r\n  //targetData is the data from backend in the fetchTargetImages\r\n  const [targetData, setTargetData] = useState(null);\r\n\r\n  const [targetStat, setTargetStatus] = useState(false);\r\n\r\n  const [scoreboard, setScoreboard] = useState(null);\r\n\r\n  const [time, setTime] = useState({\r\n    sec: 0,\r\n    min: 0,\r\n    hr: 0,\r\n  });\r\n\r\n  const [intervalId, setIntervalId] = useState();\r\n\r\n  const updateTimer = () => {\r\n    setTime((prev) => {\r\n      let newTime = { ...prev };\r\n      if (newTime.sec < 59) newTime.sec += 1;\r\n      else {\r\n        newTime.min += 1;\r\n        newTime.sec = 0;\r\n      }\r\n      if (newTime.min === 60) {\r\n        newTime.min = 0;\r\n        newTime.hr += 1;\r\n      }\r\n      return newTime;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTargetImages();\r\n    let id = setInterval(updateTimer, 1000);\r\n    setIntervalId(id);\r\n    console.log(Map, \"adadawdwa\");\r\n    return () => clearInterval(id);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (targetData !== null && checkAllTargets()) {\r\n      setScoreboard(true);\r\n    }\r\n  }, [targetData]);\r\n\r\n  function fetchTargetImages() {\r\n    fetch(`http://localhost:3000/${Map}Targets`)\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => setTargetData(data));\r\n  }\r\n  function checkAllTargets() {\r\n    const checkAllTargets = targetData.every((obj) => {\r\n      if (obj.status) {\r\n        return true;\r\n      }\r\n    });\r\n    return checkAllTargets;\r\n  }\r\n  function handleGame(event) {\r\n    setMenu(!menu);\r\n    handlePosition(event);\r\n  }\r\n\r\n  const handlePosition = (e) => {\r\n    let midnight = document.querySelector(\".map-image\");\r\n    let xPositioning = e.clientX + window.scrollX;\r\n    let yPositioning = e.clientY + window.scrollY;\r\n\r\n    let containerWidth = midnight.clientWidth;\r\n    let containerHeight = midnight.clientHeight;\r\n    let targetCordX = (xPositioning / containerWidth) * 100;\r\n    let targetCordY = (yPositioning / containerHeight) * 100;\r\n\r\n    console.log(targetCordX, \"X\");\r\n    console.log(targetCordY, \"Y\");\r\n    setTargetCoreXPosition(xPositioning);\r\n    setTargetCoreYPosition(yPositioning);\r\n    setCordX(targetCordX);\r\n    setCordY(targetCordY);\r\n    setTargetListXPosition(xPositioning);\r\n    if (targetCordY > 86.31636562671045) {\r\n      setTargetListYPosition(yPositioning);\r\n    } else {\r\n      setTargetListYPosition(yPositioning);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <targetContext.Provider\r\n        value={{\r\n          targetListX,\r\n          targetListY,\r\n          targetData,\r\n          setTargetData,\r\n          targetCoreX,\r\n          targetCoreY,\r\n          cordX,\r\n          cordY,\r\n          targetStat,\r\n          setTargetStatus,\r\n          menu,\r\n          setMenu,\r\n          scoreboard,\r\n          setScoreboard,\r\n          time,\r\n          setTime,\r\n          intervalId,\r\n          setIntervalId,\r\n          Map,\r\n        }}\r\n      >\r\n        <Header />\r\n        {targetStat && <TargetStatus />}\r\n        <img\r\n          src={`./images/${Map}.png`}\r\n          alt=\"\"\r\n          className=\"map-image\"\r\n          onClick={handleGame}\r\n        ></img>\r\n\r\n        {menu && <TargetCore />}\r\n\r\n        {scoreboard && <SubmitData />}\r\n      </targetContext.Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport { Midnight, targetContext };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}